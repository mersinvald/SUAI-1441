6. Листинги программы

[stack.h]:
#ifndef STACK_H
#define STACK_H
#include <stdlib.h>
#include <types.h>


void push(cell c, stack **s, unsigned int* sizeptr);
cell pop(stack **s, unsigned int* sizeptr);

void wipe(stack **s, unsigned int* sizeptr);
#endif // STACK_H

[types.h]:
#ifndef TYPES_H
#define TYPES_H
#include <SDL2/SDL_opengl.h>
#include <stdio.h>

struct cods{
    unsigned int x;
    unsigned int y;
};

typedef struct cods cell;

enum mazeCell {CELL = 0, GENCELL, GENVISITED, RENDERED, WALL, WAY, CURRENT, LAST, SEEKED, EXIT};

typedef int*               mazeString;
typedef int**              mazeMatrix;

struct cellString{
    cell* cells;
    unsigned int size;
};
typedef struct cellString cellString;

struct Stack{
    cell c;
    struct Stack *next;
};
typedef struct Stack stack;

struct mazeData{
    unsigned int width;
    unsigned int height;
    unsigned int unvisitedNum;
    mazeMatrix   maze;
    stack*       s;
    unsigned int stackSize;
    cell         startPoint;
    cell         exitPoint;
    cell         cellNext;
    int error;
};
typedef struct mazeData data;

struct vertex{
    GLfloat x,y;
};

struct vertexColor{
    GLubyte r,g,b;
};

typedef struct vertex vertex;
typedef struct vertexColor vertexColor;

struct renderData{
    unsigned int width;
    unsigned int height;
    //opengl data
    GLfloat x;
    GLfloat y;
    GLfloat pSize;
    vertex *vertices;
    vertexColor *verticesColor;
    int vertices_count;

};

typedef struct renderData renderData;

enum actions {NOTHING = 0, GENERATE, SOLVE, ALL, STOP};






struct parms{
        int width;
        int height;
        int windowW;
        int windowH;
        int animationDelay;
        int framesDrop;
        int fullscreen;
        cell startPoint;
        cell exitPoint;
};
typedef struct parms parms;



#endif // TYPES_H

[generator.h]:
#ifndef GENERATOR_H
#define GENERATOR_H
#include <types.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <funcs.h>
#include <common.h>
#include <stack.h>


data generate           (data d);

data generateStep       (data d);

mazeMatrix init         (unsigned int width,
                         unsigned int height);

mazeMatrix finalize     (unsigned int width,
                         unsigned int heiggt,
                         mazeMatrix   maze);

mazeMatrix removeWall   (cell first,
                         cell second,
                         mazeMatrix maze);

cellString getCells     (unsigned int width,
                         unsigned int height,
                         mazeMatrix maze);

cellString getUnvisitedCells
                        (unsigned int width,
                         unsigned int height,
                         mazeMatrix maze);

unsigned int        unvisitedCount
                        (unsigned int width,
                         unsigned int height,
                         mazeMatrix maze);

//steps       addStep      (mazeMatrix *maze,
//                          unsigned int width,
//                          unsigned int height,
//                          cell cellCurrent,
//                          steps s);
#endif // GENERATOR_H

[seeker.h]:
#ifndef SEEKER_H
#define SEEKER_H
#include <common.h>
#include <types.h>
#include <stack.h>

data seekStep(data d);

#endif // SEEKER_H

[common.h]:
#ifndef COMMON_H
#define COMMON_H
#include <generator.h>
#include <SDL2/SDL.h>
#include <types.h>
#include <libpng16/png.h>

data initGeneratorData(int width, int height, cell startPoint);
data initSeekerData(data d,cell startPoint, cell exitPoint);
renderData initRenderData(data d, int windowW, int windowH);
renderData clearSeekerColorArray(mazeMatrix maze, renderData rd);
parms getInput(int first, int mode, parms p);

//generator and seeker common functions
mazeMatrix setMode      (cell c,
                         mazeMatrix maze,
                         int type);

cellString getNeighbours(unsigned int width,
                         unsigned int height,
                         mazeMatrix maze,
                         cell       c,
                         int distance);

//cellString getCells     (unsigned int width,
//                         unsigned int height,
//                         mazeMatrix maze,
//                         int type);

unsigned int        randomRange
                        (unsigned int low,
                         unsigned int high);

//save to png
int save_png_libpng(const char *filename, uint8_t *pixels, int w, int h);

#endif // COMMON_H

[renderer.h]:
#ifndef RENDERER_H
#define RENDERER_H
#include <stdio.h>
#include <stdlib.h>
#include <types.h>
#include <funcs.h>
#include <common.h>

#include <SDL2/SDL.h>
#include <SDL2/SDL_main.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_opengl.h>
#include <SDL2/SDL_ttf.h>

void InitGL();
int SetViewport(int width, int height);
void renderMatrix(mazeMatrix maze, renderData rd, int mode);
void drawSolveMatrix(mazeMatrix maze, renderData rd);
void drawGenerateMatrix(mazeMatrix maze, renderData rd);
int handleTextInput(SDL_Event e);
#endif // RENDERER_H

[stack.c]:
#include <stack.h>

//stack functions
void push(cell c, stack **s, unsigned int* sizeptr){
   stack *tmp = malloc(sizeof(stack));
   tmp->next = *s;
   tmp->c = c;
   (*sizeptr)++;
   *s = tmp;
}

cell pop(stack **s, unsigned int* sizeptr){
    stack* out;
    cell c;
    out = *s;
    *s = (*s)->next;
    c = out->c;
    (*sizeptr)--;
    free(out);
    return c;
}

void wipe(stack **s, unsigned int *sizeptr){
    while(*sizeptr > 0){
        if((*s)->next != NULL){
            pop(s, sizeptr);
        }
        else{
            (*sizeptr) = 0;
            break;
        }
    }
}







[generator.c]:
#include <generator.h>

data generateStep(data d){
    unsigned int randNum;

    cellString cellStringUnvisited;
    cellString cellStringNeighbours = getNeighbours(d.width, d.height, d.maze, d.startPoint, 2);
    if(cellStringNeighbours.size != 0){ //если у клетки есть непосещенные соседи
        randNum  = randomRange(0, cellStringNeighbours.size-1);
        d.cellNext = cellStringNeighbours.cells[randNum]; //выбираем случайного соседа
        push(d.startPoint, &d.s, &d.stackSize); //заносим текущую точку в стек
        d.maze = removeWall(d.startPoint, d.cellNext, d.maze); //убираем стену между текущей и сосендней точками
        d.unvisitedNum--;
        d.startPoint = d.cellNext; //делаем соседнюю точку текущей и отмечаем ее посещенной
        d.maze        = setMode(d.startPoint, d.maze, GENVISITED);
        free(cellStringNeighbours.cells);
    }
    else if(d.stackSize){ //если нет соседей, возвращаемся на предыдущую точку
        d.startPoint = pop(&d.s, &d.stackSize);
    }
    else{ //если нет соседей и точек в стеке, но не все точки посещены, выбираем случайную из непосещенных
        cellStringUnvisited = getUnvisitedCells(d.width, d.height, d.maze);
        randNum             = randomRange(0, cellStringUnvisited.size-1);
        d.startPoint      = cellStringUnvisited.cells[randNum];
        free(cellStringUnvisited.cells);
    }
    return d;
}

mazeMatrix init(unsigned int width, unsigned int height){
    unsigned int i, j;
    mazeMatrix maze;

    maze  = malloc(height * sizeof(int*));

    for(i = 0; i < height; i++){ //инициализируем матрицу и заполняем стенами
        maze[i] = malloc(width  * sizeof(int));
        for(j = 0; j < width; j++){
            maze[i][j] = WALL;
        }
    }

    for(i = 1; i < height-1; i+=2){ //инициализируем клетки.
        for(j = 1; j < width-1; j+=2){
            maze[i][j] = GENCELL;
        }
    }
    return maze;
}

mazeMatrix finalize(unsigned int width, unsigned int height, mazeMatrix maze){
    unsigned int i, j;
    for(i = 0; i < height; i++){
        for(j = 0; j < width; j++){
            if(maze[i][j] != WALL)
                maze[i][j] = CELL;
        }
    }

    return maze;
}

cellString getCells(unsigned int width, unsigned int height, mazeMatrix maze){
    cellString cells;
    unsigned int i, j, size = 0;

    cells.cells = malloc(width*height*sizeof(cell));

    for(i = 0; i < height; i++){
        for(j = 0; j < height; j++){
            if(maze[i][j] != WALL){
                cells.cells[size].x = j;
                cells.cells[size].y = i;
                size++;
            }
        }
    }
    cells.size = size;
    return cells;
}

cellString getUnvisitedCells(unsigned int width, unsigned int height, mazeMatrix maze){
    cellString cells;
    unsigned long long i, j, size = 0;

    //printBitmap(*maze, width, height);

    cells.cells = malloc(width*height*sizeof(cell));

    for(i = 0; i < height; i++){
        for(j = 0; j < width; j++){
            if((maze[i][j] != WALL) && (maze[i][j] != GENVISITED)){
                cells.cells[size].x = j;
                cells.cells[size].y = i;
                size++;
            }
        }
    }
    cells.size = size;
    return cells;
}

mazeMatrix removeWall(cell first, cell second, mazeMatrix maze){
    short int xDiff = second.x - first.x;
    short int yDiff = second.y - first.y;
    short int addX, addY;
    cell target;

    addX = (xDiff != 0) ? (xDiff / abs(xDiff)) : 0; //(diff.x > 0) ? 1 : 0, (!diff.x) ? 0
    addY = (yDiff != 0) ? (yDiff / abs(yDiff)) : 0;

    target.x = first.x + addX; //координаты стенки
    target.y = first.y + addY;

    maze[target.y][target.x] = GENVISITED;
    return maze;
}

unsigned int unvisitedCount(unsigned int width, unsigned int height, mazeMatrix maze){
    unsigned int count = 0, i, j;
    for (i = 0; i < height; i++)
        for (j = 0; j < width; j++)
            if(maze[i][j] != WALL && maze[i][j] != GENVISITED) count++;
    return count;
}

[seeker.c]:
#include <seeker.h>

data seekStep(data d){
   // unsigned int randNum;
    cellString Neighbours = getNeighbours(d.width, d.height, d.maze, d.startPoint, 1);
    if(Neighbours.size){
        d.maze        = setMode(d.startPoint, d.maze, WAY);
        //randNum = randomRange(0, Neighbours.size-1);
        d.cellNext = Neighbours.cells[0]; //выбираем случайного соседа
        push(d.startPoint, &d.s, &d.stackSize); //заносим текущую точку в стек
        d.startPoint = d.cellNext; //делаем соседнюю точку текущей и отмечаем ее посещенной
        free(Neighbours.cells);
    }
    else if(d.stackSize){
        d.maze = setMode(d.startPoint, d.maze, SEEKED);
        d.startPoint = pop(&d.s, &d.stackSize);;
    }
    else{
        d.error = 1;
    }
    return d;
}

[common.c]:
#include <common.h>

//initialisation finctions
data initGeneratorData(int width, int height, cell startPoint){
    data d;
    d.width = width;
    d.height = height;
    d.startPoint.x = startPoint.x;
    d.startPoint.y = startPoint.y;
    d.maze = init(width, height);
    d.maze = setMode(d.startPoint, d.maze, GENVISITED);
    d.s = NULL;
    d.stackSize = 0;
    d.unvisitedNum = unvisitedCount(width, height, d.maze);
    d.error = 0;
    return d;
}

data initSeekerData(data d, cell startPoint, cell exitPoint){
    wipe(&d.s, &d.stackSize);
    d.maze = finalize(d.width, d.height, d.maze);
    d.startPoint = startPoint;
    d.exitPoint  = exitPoint;
    d.s = NULL;
    d.stackSize = 0;
    d.error = 0;
    return d;
}

renderData initRenderData(data d, int windowW, int windowH){
    renderData rd;
    rd.width = d.width;
    rd.height = d.height;
    rd.x = -windowW/2;
    rd.y = -windowH/2;
    GLfloat pSizeX = (GLfloat)(windowW) / (rd.width) ;
    GLfloat pSizeY = (GLfloat)(windowH) / (rd.height);
    if(pSizeX > pSizeY) rd.pSize = pSizeY;
    else                rd.pSize = pSizeX;

    int marginX = (windowW - (rd.pSize * rd.width)) / 2;
    int marginY = (windowH - (rd.pSize * rd.height)) / 2;

    rd.x += marginX;
    rd.y += marginY;

    //generate vertex array
    vertex*      vArray = malloc(rd.width*rd.height*4*sizeof(vertex));
    vertexColor* cArray = malloc(rd.width*rd.height*4*sizeof(vertexColor));
    unsigned int vert = 0, i, j;
    for(i = 0; i < rd.height; i++){
        for(j = 0; j < rd.width; j++){
            vArray[vert].x   = rd.x+rd.pSize*j;
            vArray[vert++].y = rd.y+rd.pSize*i;

            vArray[vert].x   = rd.x+rd.pSize*j;
            vArray[vert++].y = rd.y+rd.pSize+rd.pSize*i;

            vArray[vert].x   = rd.x+rd.pSize+rd.pSize*j;
            vArray[vert++].y = rd.y+rd.pSize+rd.pSize*i;

            vArray[vert].x   = rd.x+rd.pSize+rd.pSize*j;
            vArray[vert++].y = rd.y+rd.pSize*i;
        }
    }
    rd.vertices = vArray;
    rd.vertices_count = vert;  

    memset(cArray, 0, sizeof(vertexColor)*rd.width*rd.height*4);

    rd.verticesColor = cArray;
    return rd;
}

renderData clearSeekerColorArray(mazeMatrix maze, renderData rd){
    unsigned int i, j, c, col = 0;
    for(i = 0; i < rd.height; i++){
        for(j = 0; j < rd.width; j++){
            if(maze[i][j] != WALL){
                for(c = 0; c<4; c++){
                    rd.verticesColor[col].r = 255;
                    rd.verticesColor[col].g = 255;
                    rd.verticesColor[col++].b = 255;
                }
            }
            else col+=4;
        }
    }
    return rd;
}




























parms getInput(int first, int mode, parms p){
    parms input = p;
    SDL_DisplayMode displayMode;
    int ans;

    if(!first){
        printf("\n");
    }

    printf("Width x Height: \t");                scanf("%i%i", &input.width, &input.height);
    if(first){
        printf("Fullscreen? (1/0): ");
        scanf("%i", &ans);
        if(ans){
            input.fullscreen = SDL_WINDOW_FULLSCREEN;
            SDL_GetCurrentDisplayMode(0, &displayMode);
            input.windowW = displayMode.w;
            input.windowH = displayMode.h;
        }
        else{
            input.fullscreen = 0;
            printf("Window width x height: \t");     scanf("%i%i", &input.windowW, &input.windowH);
        }
    }
    if(mode != GENERATE){
        printf("Start Point: \t\t");      scanf("%i%i", &input.startPoint.x, &input.startPoint.y);
        //printf("Exit Point: \t\t");       scanf("%i%i", &input.exitPoint.x, &input.exitPoint.y);
    }
    printf("Step delay(msec): \t");       scanf("%i", &input.animationDelay);
    printf("Draw each x frame: \t");      scanf("%i", &input.framesDrop);

    input.exitPoint.x = (input.width % 2 == 0) ? input.width - 3 : input.width - 2;
    input.exitPoint.y = (input.height % 2 == 0) ? input.height - 3 : input.height - 2;

    //input.width = input.width * 2 + 1;
    //input.height = input.height * 2 + 1;

    return input;
}

//generator and seeker common functions
cellString getNeighbours(unsigned int width, unsigned int height, mazeMatrix maze, cell c, int distance){
    unsigned int i;
    unsigned int x = c.x;
    unsigned int y = c.y;
    cell up = {x, y - distance};
    cell rt = {x + distance, y};
    cell dw = {x, y + distance};
    cell lt = {x - distance, y};
    cell d[4]  = {dw, rt, up, lt};
    unsigned int size = 0;

    cellString cells;
    cells.cells = malloc(4 * sizeof(cell));

    for(i = 0; i < 4; i++){ //для каждого направдения d
        if(d[i].x > 0 && d[i].x < width && d[i].y > 0 && d[i].y < height){ //если не выходит за границ
            unsigned int mazeCellCurrent = maze[d[i].y][d[i].x];
            cell     cellCurrent     = d[i];
            if(mazeCellCurrent != WALL && mazeCellCurrent != GENVISITED && mazeCellCurrent != SEEKED && mazeCellCurrent != WAY){ //и не посещена\является стеной
                cells.cells[size] = cellCurrent; //записать в массив;
                size++;
            }
        }
    }

    cells.size = size;
    return cells;
}

mazeMatrix setMode(cell c, mazeMatrix maze, int mode){
    unsigned int x = c.x;
    unsigned int y = c.y;
    maze[y][x] = mode;
    return maze;
}

unsigned int randomRange(unsigned int low, unsigned int high){

    return rand() % (high - low + 1) + low;
}








[renderer.c]:
#include <renderer.h>
void renderMatrix(mazeMatrix maze, renderData rd, int mode){
    glClear(GL_COLOR_BUFFER_BIT);
    //printVertices(rd.vertices, rd.vertices_count);

    if(mode == GENERATE)   drawGenerateMatrix(maze, rd);
    else                   drawSolveMatrix(maze, rd);

    glDrawArrays(GL_QUADS,0, rd.vertices_count);
    //memset(cArray, 255, sizeof(vertexColor)*rd.width*rd.height*4); //очистка массива цветов точек
}

void drawGenerateMatrix(mazeMatrix maze, renderData rd){
    int i, j, c, col = 0;
    for(i = 0; i < rd.height; i++){
        for(j = 0; j < rd.width; j++){
            if(maze[i][j] != WALL && maze[i][j] != GENCELL){
                for(c = 0; c<4; c++){
                    switch (maze[i][j]){
                        case CURRENT: rd.verticesColor[col].r = 0;
                                      rd.verticesColor[col].g = 255;
                                      rd.verticesColor[col].b = 0;
                                      break;
                        case GENVISITED:
                                      rd.verticesColor[col].r = 255;//randomRange(0, 255);//= 0;
                                      rd.verticesColor[col].g = 255;//randomRange(0, 255);//= 0;
                                      rd.verticesColor[col].b = 255;//randomRange(0, 255);//= 0;
                                      break;/*
                        case GENCELL:
                                                              rd.verticesColor[col].r = 255;
                                                              rd.verticesColor[col].g = 255;
                                                              rd.verticesColor[col].b = 255;
                                                              break;*/
                    }
                    col++;
                }
            }
            else col+=4;
        }
    }
}

void drawSolveMatrix(mazeMatrix maze, renderData rd){
    int i, j, c, col = 0;
    static int cr = 255;
    static int cg = 30;
    static int cb = 30;
    static int fr, fg, fb;
    if(fr != 1){
        if(cr < 255) cr++;
        else         fr = 1;}
    else{
        if(cr > 100) cr--;
        else         fr = 0;}
    for(i = 0; i < rd.height; i++){
        for(j = 0; j < rd.width; j++){
            if(maze[i][j] != WALL && maze[i][j] != GENCELL && maze[i][j] != GENVISITED){
                for(c = 0; c<4; c++){
                    switch (maze[i][j]){
                        case WAY:
                                      rd.verticesColor[col].r = cr;
                                      rd.verticesColor[col].g = cg;
                                      rd.verticesColor[col].b = cb;
                                      break;
                        case SEEKED:  rd.verticesColor[col].r = 255;
                                      rd.verticesColor[col].g = 255;
                                      rd.verticesColor[col].b = 255;
                                      break;
                        case CURRENT:
                                      rd.verticesColor[col].r = 0;
                                      rd.verticesColor[col].g = 255;
                                      rd.verticesColor[col].b = 0;
                                      //rd.verticesColor[col].r = 10;
                                      //rd.verticesColor[col].g = 255;
                                      //rd.verticesColor[col].b = 70;
                                      break;
                        case EXIT:    rd.verticesColor[col].r = 0;
                                      rd.verticesColor[col].g = 255;
                                      rd.verticesColor[col].b = 0;
                        default: break;
                    }
                    col++;
                }
            }
            else col+=4;
        }
    }
}

[main.c]:
#include <stdio.h>
#include <generator.h>
#include <seeker.h>
#include <renderer.h>
#include <types.h>
#include <funcs.h>
#include <common.h>
#include <stack.h>


int main(int argc, char **argv)
{
    parms input;
    parms last;
    int quit = 0;
    data d;
    renderData rd;

    srand((unsigned)clock());

    //инициализация SDL2
    SDL_Init(SDL_INIT_VIDEO);
    input = getInput(1, ALL, input);
    SDL_Window   *window   = SDL_CreateWindow("Labytinth", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, input.windowW, input.windowH, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN | input.fullscreen);
    SDL_GLContext context  = SDL_GL_CreateContext(window);
    SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
    SDL_Event event;

    //OpenGL 4.1
    glMatrixMode(GL_PROJECTION|GL_MODELVIEW);
    glLoadIdentity();
    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    glOrtho(-input.windowW/2,input.windowW/2,input.windowH/2,-input.windowH/2,0,1);
    glClearColor( 1, 1, 1, 0 );
    SDL_GL_SetSwapInterval( 1 ); //vsync

    uint8_t *data;
    int flagChanged = 0;
    int flagAction = NOTHING;
    int flagGenerated = 0;
    int flagGeneratorData   = 0;
    int flagSolverData   = 0;
    int flagSolved = 0;
    int i = 0;


    glClear(GL_COLOR_BUFFER_BIT);
    SDL_GL_SwapWindow(window);

    while(!quit){
        while(SDL_PollEvent(&event)){
            if(event.type == SDL_QUIT)
                quit = 1;

            else if (event.type == SDL_KEYDOWN){
                    switch (event.key.keysym.sym){
                case  SDLK_g:      flagAction = GENERATE;      break;
                case  SDLK_s:      flagAction = SOLVE;         break;
                case  SDLK_TAB:    flagAction = STOP;          break;
                case  SDLK_ESCAPE: quit = 1;                   break;
                case  SDLK_UP:     input.framesDrop++;         break;
                case  SDLK_RIGHT:  input.animationDelay++;
                case  SDLK_DOWN:   input.framesDrop = (input.framesDrop - 1 > 0) ? input.framesDrop - 1 : 1;
                                   break;
                case  SDLK_LEFT:   input.animationDelay = (input.animationDelay - 1 >= 0) ? input.animationDelay - 1 : 0;
                                   break;
                }
            }
        }
        










		



		if(flagAction == GENERATE){
            if(!flagGeneratorData){
                d = initGeneratorData(input.width, input.height, input.startPoint);
                rd = initRenderData(d, input.windowW, input.windowH);
                glVertexPointer(2, GL_FLOAT, sizeof(vertex), rd.vertices);
                glColorPointer(3, GL_UNSIGNED_BYTE, sizeof(vertexColor), rd.verticesColor);
                flagGeneratorData = 1;
                flagGenerated = 0;
                flagSolved = 0;
                flagSolverData = 0;
            }
            for(i = 0; i < input.framesDrop; i++){
                if(d.unvisitedNum != 0){
                    d = generateStep(d);
                    //flagAction = NOTHING; //пошаговое выполнение
                }
                else{
                    flagGeneratorData = 0;
                    flagGenerated = 1;
                    flagAction = NOTHING;
                    break;
                }
            }
            d.maze[d.startPoint.y][d.startPoint.x] = CURRENT;
            renderMatrix(d.maze, rd, GENERATE);
            d.maze[d.startPoint.y][d.startPoint.x] = GENVISITED;
            flagChanged = 1;
        }
        else if(flagAction == SOLVE && flagGenerated){
            if(!flagSolverData){
                d = initSeekerData(d, input.startPoint, input.exitPoint);
                rd = clearSeekerColorArray(d.maze, rd);
                flagSolverData = 1;
            }
            for(i = 0; i < input.framesDrop; i++){
                if((d.startPoint.x != d.exitPoint.x || d.startPoint.y != d.exitPoint.y) && d.error != 1){
                    d = seekStep(d);
                }
                else if(d.error){
                    printf("ERROR: Lanyrinth cannot be solved! :C\n");
                }
                else{
                    flagSolved = 1;
                    flagSolverData = 0;
                    flagAction = NOTHING;
                    d.maze = setMode(d.exitPoint, d.maze, WAY);
                    break;
                }
            }
            setMode(d.startPoint, d.maze, CURRENT);
            renderMatrix(d.maze, rd, SOLVE);
            setMode(d.startPoint, d.maze, WAY);
            flagChanged = 1;
        }
        else if(flagAction == STOP){
            last = input;
            input = getInput(0, GENERATE, last);
            if((last.width != input.width) || (last.height != input.height)){
                //d = initGeneratorData(input.width, input.height, input.startPoint);
                //rd = initRenderData(d, input.windowW, input.windowH);
                //glVertexPointer(2, GL_FLOAT, sizeof(vertex), rd.vertices);
                //glColorPointer(3, GL_UNSIGNED_BYTE, sizeof(vertexColor), rd.verticesColor);
                flagGenerated = 0;
                flagGeneratorData = 0;
                flagSolverData = 0;
                flagSolved = 0;
            }
            flagAction = NOTHING;
            flagChanged = 1;
        }
        if(flagAction != NOTHING || flagChanged){
            SDL_Delay(input.animationDelay);
            SDL_GL_SwapWindow(window);
            flagChanged = 0;
        }
    }

    //cleanup
    wipe(&d.s, &d.stackSize);
    return 0;
}

